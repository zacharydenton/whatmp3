#!/usr/bin/env python

##############################################################
# whatmp3 - Convert FLAC to mp3, create what.cd torrent.
# Created by shardz (logik.li) and demonstar55
##############################################################

import os
import re
import copy
import fnmatch
import shutil
from optparse import OptionParser
import threading

VERSION = "3.4"

### BEGIN CONFIGURATION ###

# Output folder unless specified:
data_dir = os.getcwd()

# Torrents are placed in this directory
torrent_dir = data_dir

# Do you want to move additional files (.jpg, .log, etc)?
moveother = 1

# Do you want to zeropad tracknumbers? (1 => 01, 2 => 02 ...)
zeropad = 1

# Do you want to dither FLACs to 16/44 before encoding?
dither = 0

# Specify tracker ("http://tracker.what.cd:34000/")
tracker = "http://tracker.what.cd:34000/"

# Specify torrent passkey
passkey = "tracker_passkey_here"

# Specify site credentials (to upload torrents)
username = ""
password = ""

# Max number of threads (ex: Normal: 1, Dual-core = 2, Hyperthreaded Dual-core = 4)
max_threads = 4

# Default encoding options
enc_options = {
    '320':  {'enc': 'lame',     'opts': '-b 320 --ignore-tag-errors'},
    'V0':   {'enc': 'lame',     'opts': '-V 0 --vbr-new --ignore-tag-errors'},
    'V2':   {'enc': 'lame',     'opts': '-V 2 --vbr-new --ignore-tag-errors'},
    'Q8':   {'enc': 'oggenc',   'opts': '-q 8'},
    'AAC':  {'enc': 'neroAacEnc',   'opts': '-br 320000'},
    'ALAC': {'enc': 'ffmpeg',   'opts': '-i - -acodec alac'},
    'FLAC': {'enc': 'flac',     'opts': '--best'}
}

# Default codecs - these are used if the --original option is specified
default_codecs = ['V0', 'V2', 'Q8', '320', 'AAC']

### END CONFIGURATION ###

try:
    import mechanize
    UPLOAD = {}
except:
    UPLOAD = None

TRACKERS = {
    'whatcd' : {
        'login' : {
            'url' : 'http://what.cd/login.php',
            'fields' : {
                'username' : 'username',
                'password' : 'password'
            }
        },
    },
}

codecs = []

# os.system() and os.popen() have issues with `
def escape(pattern):
    pattern = re.sub('`', '\`', pattern)
    return pattern

def esc(pattern):
    pattern = re.sub('"', '\\"', pattern)
    return pattern

def get_tags(filename):
    tags = {}
    for tag in ('TITLE', 'ALBUM', 'ARTIST', 'TRACKNUMBER', 'GENRE', 'COMMENT', 'DATE'):
        tagcommand = 'metaflac --show-tag=' + esc(tag) + ' "' + esc(filename) + '"'
        temp = re.sub('\S.*=', '', os.popen(escape(tagcommand)).read().rstrip())
        tags.update({tag:temp})
        del temp

    return tags

def login(username, password, tracker='whatcd'):
    tracker_info = TRACKERS[tracker]
    login_info = tracker_info['login']

    browser = mechanize.Browser()
    browser.set_handle_robots(False) # ignore robots.txt
    browser.open(login_info['url'])

    fields = login_info['fields']
    browser.select_form(nr=0)
    browser[fields['username']] = username
    browser[fields['password']] = password
    response = browser.submit()

    return browser

def upload(torrent, encoder, bitrate, logfiles, artists=None, original=False, tracker='whatcd'):
    print "Uploading %s %s..." % (encoder, bitrate)
    if not UPLOAD.has_key('upload_url'):
        done = False
        upload_url = 'http://what.cd/upload.php'
        print("Upload URL? ")
        if 'y' in raw_input('"%s" - Is this correct? ' % upload_url).lower():
            done = True
        while not done:
            upload_url = raw_input('Upload URL? ')
            if 'y' in raw_input('"%s" - Is this correct? ' % upload_url).lower():
                done = True

        UPLOAD['upload_url'] = upload_url
    upload_url = UPLOAD['upload_url']
    if upload_url != 'http://what.cd/upload.php':
        original = False

    browser = login(username, password, tracker)
    browser.open(upload_url)

    browser.select_form(nr=len(list(browser.forms()))-1) # select the last form on the page

    def get_input(field):
        while True:
            response = raw_input(field + '? ')
            if 'y' in raw_input('"%s" - Is this correct? ' % response).lower():
                return response.strip()
    
    def fill_out(field):
        if not UPLOAD.has_key(field):
            UPLOAD[field] = get_input(field)
        if UPLOAD[field]:
            browser[field] = UPLOAD[field]

    def fill_multiple(field, items):
        # save a copy of the unfilled control - we may need it later
        unfilled_control = copy.deepcopy(browser.find_control(field))

        # fill out the existing control
        control = browser.find_control(field)
        if isinstance(control, mechanize._html.ClientForm.FileControl):
            control.add_file(open(items[0]), 'text/plain', os.path.basename(items[0]))
        else:
            control._value = items[0]

        try:
            for i, item in enumerate(items[1:]):
                control = copy.deepcopy(unfilled_control)
                if isinstance(control, mechanize._html.ClientForm.FileControl):
                    control.add_file(open(item), 'text/plain', os.path.basename(item))
                else:
                    control._value = item
                control.add_to_form(browser.form)
        except IndexError:
            pass

    # add the torrent file
    browser.find_control('file_input').add_file(open(torrent), 'text/plain', os.path.basename(torrent))

    # specify artists
    if original:
        if UPLOAD.has_key('artists[]'):
            if 'y' in raw_input('Artists: "%s" - is this OK? ' % str(list(UPLOAD['artists[]']))):
                fill_multiple('artists[]', UPLOAD['artists[]'])
        else:
            done = False
            while not done:
                artists = set([artist.strip() for artist in raw_input('Semicolon-separated artist list. ').split(';')])
                if 'y' in raw_input('Artists: "%s" - is this OK? ' % str(list(artists))):
                    done = True
            fill_multiple('artists[]', artists)

    # specify album title
    if original:
        if UPLOAD.has_key('title'):
            if not 'y' in raw_input('Title: "%s" - is this OK? ' % UPLOAD['title']):
                del UPLOAD['title']
        fill_out('title')

    # specify album year
    if original:
        if UPLOAD.has_key('year'):
            if not 'y' in raw_input('Year: "%s" - is this OK? ' % UPLOAD['year']):
                del UPLOAD['year']
        fill_out('year')

    # specify record label
    if original:
        fill_out('record_label')

    # specify catalogue number
    if original:
        fill_out('catalogue_number')

    # specify release type
    if original:
        if not UPLOAD.has_key('releasetype'):
            releasetype = browser.find_control('releasetype')
            for item in releasetype.get_items():
                print(item, item.get_labels()[0].text)
            done = False
            while not done:
                response = raw_input('Release type (select a number from the list) ? ')
                if 'y' in raw_input('"%s" - Is this correct? ' % response).lower():
                    UPLOAD['releasetype'] = response.strip()
                    done = True
        browser.find_control('releasetype').set('1', UPLOAD['releasetype'])

    # specify edition information
    if not UPLOAD.has_key('remaster'):
        print('leave blank if original release')
        UPLOAD['remaster'] = get_input('remaster')
    if UPLOAD['remaster']:
        browser.find_control('remaster').set_single('1')
    
        # specify edition information
        fill_out('remaster_year')
    
        # specify edition information
        fill_out('remaster_title')
    
        # specify edition information
        fill_out('remaster_record_label')
    
        # specify edition information
        fill_out('remaster_catalogue_number')

    # specify format 
    browser.find_control('format').set('1', encoder)

    # specify bitrate
    browser.find_control('bitrate').set('1', bitrate)

    # specify media
    if not UPLOAD.has_key('media'):
        print(browser.find_control('media'))
        done = False
        while not done:
            response = raw_input('Media type? ').strip()
            if 'y' in raw_input('"%s" - Is this correct? ' % response).lower():
                UPLOAD['media'] = response
                done = True
    browser.find_control('media').set('1', UPLOAD['media'])

    # add the logfile
    if encoder == 'FLAC' and UPLOAD['media'] == 'CD':
        try:
            fill_multiple('logfiles[]', logfiles)
        except:
            pass

    # specify tags
    if original:
        fill_out('tags')

    # specify image
    if original:
        fill_out('image')

    # specify album description
    if original:
        if not UPLOAD.has_key('album_desc'):
            done = False
            desc = []
            print("Album description:")
            print("CTRL+C to end input")
            while not done:
                try:
                    desc.append(raw_input())
                except KeyboardInterrupt:
                    done = True
            UPLOAD['album_desc'] = "\n".join(desc)
        browser['album_desc'] = UPLOAD['album_desc']

    # specify release description
    if not UPLOAD.has_key('release_desc'):
        done = False
        desc = []
        print("Release description:")
        print("CTRL+C to end input")
        while not done:
            try:
                desc.append(raw_input())
            except KeyboardInterrupt:
                done = True
        UPLOAD['release_desc'] = "\n".join(desc)
    browser['release_desc'] = UPLOAD['release_desc']

    # submit the form
    response = browser.submit()

    # save the new upload link
    if original:
        UPLOAD['upload_url'] = 'http://what.cd/' + browser.find_link(text='[Add format]').url
        print browser.geturl() # display the URL to the new torrent

class Transcode(threading.Thread):
    def __init__(self, file, flacdir, mp3_dir, codec, options, cv):
        threading.Thread.__init__(self)
        self.file = file
        self.flacdir = flacdir
        self.mp3_dir = mp3_dir
        self.codec = codec
        self.options = options
        self.cv = cv

    def run(self):
        tags = get_tags(self.file)

        if self.options.zeropad and len(tags['TRACKNUMBER']) == 1:
            tags['TRACKNUMBER'] = '0' + tags['TRACKNUMBER']

        mp3_filename = re.sub(re.escape(self.flacdir), self.mp3_dir, self.file)
        mp3_filename = re.sub('\.flac$', '', mp3_filename)
        if not os.path.exists(os.path.dirname(mp3_filename)):
            os.makedirs(os.path.dirname(mp3_filename))

        flac_command = ''

        if enc_options[self.codec]['enc'] == 'lame':
            flac_command = 'lame -S %s --tt "%s" --tl "%s" --ta "%s" --tn "%s" --tg "%s" --ty "%s" --add-id3v2 - "%s.mp3" 2>&1'
        elif enc_options[self.codec]['enc'] == 'oggenc':
            flac_command = 'oggenc -Q %s -t "%s" -l "%s" -a "%s" -N "%s" -G "%s" -d "%s" -o "%s.ogg" - 2>&1'
        elif enc_options[self.codec]['enc'] == 'ffmpeg':
            flac_command = 'ffmpeg %s -metadata title="%s" -metadata album="%s" -metadata author="%s" -metadata track="%s" -metadata genre="%s" -metadata date="%s" "%s.m4a" 2>&1'
        elif enc_options[self.codec]['enc'] == 'neroAacEnc':
            flac_command = 'neroAacEnc %s -if - -of "%s.m4a" >/dev/null 2>/dev/null && neroAacTag "%s.m4a" -meta:title="%s" -meta:album="%s" -meta:artist="%s" -meta:track="%s" -meta:genre="%s" -meta:year="%s" >/dev/null 2>/dev/null'
        elif enc_options[self.codec]['enc'] == 'flac':
            if self.options.replaygain:
                flac_command = 'flac %s -s --replay-gain -T "TITLE=%s" -T "ALBUM=%s" -T "ALBUM=%s" -T "TRACKNUMBER=%s" -T "GENRE=%s" -T "DATE=%s" -o "%s.flac" - 2>&1'
            else:
                flac_command = 'flac %s -s -T "TITLE=%s" -T "ALBUM=%s" -T "ALBUM=%s" -T "TRACKNUMBER=%s" -T "GENRE=%s" -T "DATE=%s" -o "%s.flac" - 2>&1'

        dither_command = 'sox -t wav - -b 16 -t wav - rate 44100 dither'

        if enc_options[self.codec]['enc'] == 'neroAacEnc':
            if self.options.dither:
                flac_command = 'flac -dcs -- "' + esc(self.file) + '" | ' + dither_command + ' | ' + flac_command % (esc(enc_options[self.codec]['opts']), esc(mp3_filename), esc(mp3_filename), esc(tags['TITLE']), esc(tags['ALBUM']), esc(tags['ARTIST']), esc(tags['TRACKNUMBER']), esc(tags['GENRE']), esc(tags['DATE']))
            else:
                flac_command = 'flac -dcs -- "' + esc(self.file) + '" | ' + flac_command % (esc(enc_options[self.codec]['opts']), esc(mp3_filename), esc(mp3_filename), esc(tags['TITLE']), esc(tags['ALBUM']), esc(tags['ARTIST']), esc(tags['TRACKNUMBER']), esc(tags['GENRE']), esc(tags['DATE']))
        elif enc_options[self.codec]['enc'] == 'flac' and self.options.dither:
            # seems like FLAC and SoX don't work together via pipes. use files instead.
            flac_command = 'flac -dcs -- "' + esc(self.file) + '" | ' + dither_command + ' > "' + esc(mp3_filename) + '.wav"; ' + flac_command % (esc(enc_options[self.codec]['opts']), esc(tags['TITLE']), esc(tags['ALBUM']), esc(tags['ARTIST']), esc(tags['TRACKNUMBER']), esc(tags['GENRE']), esc(tags['DATE']), esc(mp3_filename)) + ' < "' + esc(mp3_filename) + '.wav"'
        else:
            if self.options.dither:
                flac_command = 'flac -dcs -- "' + esc(self.file) + '" | ' + dither_command + ' | ' + flac_command % (esc(enc_options[self.codec]['opts']), esc(tags['TITLE']), esc(tags['ALBUM']), esc(tags['ARTIST']), esc(tags['TRACKNUMBER']), esc(tags['GENRE']), esc(tags['DATE']), esc(mp3_filename))
            else:
                flac_command = 'flac -dcs -- "' + esc(self.file) + '" | ' + flac_command % (esc(enc_options[self.codec]['opts']), esc(tags['TITLE']), esc(tags['ALBUM']), esc(tags['ARTIST']), esc(tags['TRACKNUMBER']), esc(tags['GENRE']), esc(tags['DATE']), esc(mp3_filename))

        if self.options.verbose:
            print(escape(flac_command))
        os.system(escape(flac_command))

        self.cv.acquire()
        self.cv.notify_all()
        self.cv.release()

        return 0

def add_enc_option(option, opt, value, parser):
    codecs.append(opt[2:])

def main():
    global UPLOAD
    # Parse options and arguments
    usage_text = "%prog [options] [--320 --V2 --Q8 --AAC ...] /path/to/FLAC"
    info_text = "Depends on flac, metaflac, mktorrent, and optionally oggenc, lame, neroAacEnc, neroAacTag, mp3gain, aacgain, and vorbisgain."
    parser = OptionParser(usage=usage_text, version="%prog " + VERSION, epilog=info_text)
    parser.add_option('-v', '--verbose',    action='store_true',    dest='verbose',     default=False,  help='increase verbosity (Default: False)')
    parser.add_option('-n', '--notorrent',  action='store_true',    dest='notorrent',   default=False,  help='will not create a torrent after conversion (Default: False)')
    parser.add_option('--nolog',        action='store_true',    dest='nolog',       default=False,  help='will not move log files after conversion (Default: False)')
    parser.add_option('--nocue',        action='store_true',    dest='nocue',       default=False,  help='will not move cue files after conversion (Default: False)')
    parser.add_option('-m', '--moveother',  action='store_true',    dest='moveother',   default=moveother,  help='move additional files (Default: True)')
    parser.add_option('-p', '--passkey',    dest='passkey',     default=passkey,    help='tracker PASSKEY', metavar='PASSKEY')
    parser.add_option('-t', '--tracker',    dest='tracker',     default=tracker,    help='tracker URL (Default: "http://tracker.what.cd:34000/")', metavar='URL')
    parser.add_option('-o', '--output', dest='data_dir',      default=data_dir,     help='set the data output PATH', metavar='PATH')
    parser.add_option('--torrent_dir', dest='torrent_dir',      default=torrent_dir,     help='set the torrent output PATH', metavar='PATH')
    parser.add_option('-z', '--zeropad',    action='store_true',    dest='zeropad',     default=zeropad,    help='zeropad track numbers (Default: True)')
    parser.add_option('-d', '--dither', action='store_true',    dest='dither',      default=dither, help='dither FLACs to 16/44 before encoding (Default: False)')
    parser.add_option('-r', '--replaygain', action='store_true',    dest='replaygain',  default=False,  help='add ReplayGain to new files (Default: False)')
    parser.add_option('--threads',      type="int",     dest='max_threads', default=max_threads,    help='set number of threads THREADS (Default: 4)', metavar='THREADS')
    parser.add_option('-c', '--original',     action="store_true", dest='original', default=False, help='create a torrent for the original FLACs and convert to all of your default formats (Default:False)')
    if UPLOAD is not None:
        parser.add_option('-u', '--upload',     action="store_true", dest='upload', default=False, help='upload the torrent after creating it (Default:False)')

    for enc_opt in enc_options.keys():
        parser.add_option("--" + enc_opt, action="callback", callback=add_enc_option)

    (options, flacdirs) = parser.parse_args()

    if options.original:
        for codec in default_codecs:
            if codec not in codecs:
                codecs.append(codec)

    if len(flacdirs) < 1:
        parser.error("Incorrect number of arguments")

    if not options.data_dir.endswith('/'):
        options.data_dir += '/'

    if not options.torrent_dir.endswith('/'):
        options.torrent_dir += '/'

    if len(codecs) == 0:
        print('You need to provide at least one format to transcode to (320, V0, Q8 ...)')
        exit()

    for flacdir in flacdirs:
        flacdir = os.path.abspath(flacdir)
        flacfiles = []

        if UPLOAD:
            UPLOAD = {}

        logfiles = []

        for dirpath, dirs, files in os.walk(flacdir, topdown=False):
            for name in files:
                if fnmatch.fnmatch(name, '*.flac'):
                    flacfiles.append(os.path.join(dirpath, name))
                elif fnmatch.fnmatch(name, '*.log'):
                    logfiles.append(os.path.join(dirpath, name))

        if options.original:
            print('Working with FLAC...')

            if options.torrent_dir and options.passkey and options.tracker and not options.notorrent:
                if options.verbose: print('Creating torrent...')
                torrent = escape(options.torrent_dir + os.path.basename(flacdir)) + ".torrent"
                torrent_command = 'mktorrent -p -a %s/announce -o "%s" "%s"' % (options.tracker + options.passkey, torrent, esc(flacdir))
                if options.verbose: print(escape(torrent_command))
                os.system(escape(torrent_command))

                if options.upload:
                    for flacfile in flacfiles:
                        tags = get_tags(flacfile)
                        # save the tags so that we may use them if we upload these files later
                        if not UPLOAD.has_key('artists[]'):
                            UPLOAD['artists[]'] = set()
                        UPLOAD['artists[]'].add(tags['ARTIST'])
                        UPLOAD['title'] = tags['TITLE']
                        UPLOAD['year'] = re.search('([0-9]{4})', tags['DATE']).group(0)

                    encoder = 'FLAC'
                    if options.dither:
                        bitrate = '24bit Lossless'
                    else:
                        bitrate = 'Lossless'
                    upload(torrent, encoder, bitrate, logfiles, original=True)

            print('Finished working with FLAC')

        for codec in codecs:
            mp3_dir = options.data_dir + os.path.basename(flacdir)
            if 'FLAC' in flacdir:
                mp3_dir = re.sub(re.compile('FLAC', re.I), codec, mp3_dir)
            else:
                mp3_dir = mp3_dir + " (" + codec + ")"
                if codec != 'FLAC':
                    mp3_dir = re.sub(re.compile('FLAC', re.I), '', mp3_dir)
            if options.dither:
                if '24' in flacdir and '96' in flacdir:
                    # XXX: theoretically, this could replace part of the album title too.
                    # e.g. "24 days in 96 castles - [24-96]" would become "16 days in 44 castles - [16-44]"
                    mp3_dir = re.sub(re.compile('24', re.I), '16', mp3_dir)
                    mp3_dir = re.sub(re.compile('96', re.I), '44', mp3_dir)
                else:
                    mp3_dir += " [16-44]"

            if not os.path.exists(mp3_dir):
                os.makedirs(mp3_dir)

            print('Encoding with ' + codec + ' started...')

            threads = []
            cv = threading.Condition()
            for file in flacfiles:
                cv.acquire()
                while((threading.activeCount() == options.max_threads + 1) or (options.max_threads == 0 and threading.activeCount() == 2)):
                    cv.wait()
                cv.release()
                t=Transcode(file, flacdir, mp3_dir, codec, options, cv)
                t.start()
                threads.append(t)

            for t in threads:
                t.join()

            if codec == 'FLAC' and options.dither:
                # discard the temporary .WAVs we created to circumvent the FLAC bug.
                for dirpath, dirs, files in os.walk(mp3_dir, topdown=False):
                    for name in files:
                        if fnmatch.fnmatch(name, '*.wav'):
                            os.remove(os.path.join(dirpath, name))

            print('\nEncoding with ' + codec + ' finished.')

            if options.moveother:
                if options.verbose: print('Moving other files...')
                for dirpath, dirs, files in os.walk(flacdir, topdown=False):
                    for name in files:
                        if options.nolog and fnmatch.fnmatch(name, '*.log'):
                            continue
                        if options.nocue and fnmatch.fnmatch(name, '*.cue'):
                            continue
                        if not fnmatch.fnmatch(name, '*.flac') and not fnmatch.fnmatch(name, '*.m3u'):
                            d = re.sub(re.escape(flacdir), mp3_dir, dirpath)
                            if not os.path.exists(d):
                                os.makedirs(d)
                            shutil.copy(os.path.join(dirpath, name), d)

            if options.replaygain:
                if options.verbose: print('Applying replay gain...')

                for dirpath, dirs, files in os.walk(mp3_dir, topdown=False):
                    for name in dirs:
                        if enc_options[codec]['enc'] == 'lame':
                            os.system(escape('mp3gain -q -c -s i "' + os.path.join(dirpath, name) + '"/*.mp3'))
                        if enc_options[codec]['enc'] == 'oggenc':
                            os.system(escape('vorbisgain -qafrs "' + os.path.join(dirpath, name) + '"/*.ogg'))
                        if enc_options[codec]['enc'] == 'neroAacEnc':
                            os.system(escape('aacgain -q -c "' + os.path.join(dirpath, name) + '"/*.m4a'))

            if options.torrent_dir and options.passkey and options.tracker and not options.notorrent:
                if options.verbose: print('Creating torrent...')
                torrent = escape(options.torrent_dir + os.path.basename(mp3_dir)) + ".torrent"
                torrent_command = 'mktorrent -p -a %s/announce -o "%s" "%s"' % (options.tracker + options.passkey, torrent, mp3_dir)
                if options.verbose: print(escape(torrent_command))
                os.system(escape(torrent_command))

                if options.upload:
                    if codec == '320':
                        encoder = 'MP3'
                        bitrate = '320'
                    elif codec == 'V0':
                        encoder = 'MP3'
                        bitrate = 'V0 (VBR)'
                    elif codec == 'V2':
                        encoder = 'MP3'
                        bitrate = 'V2 (VBR)'
                    elif codec == 'Q8':
                        encoder = 'Ogg Vorbis'
                        bitrate = 'q8.x (VBR)'
                    elif codec == 'AAC':
                        encoder = 'AAC'
                        bitrate = '320'
                    else:
                        encoder = 'FLAC'
                        bitrate = 'Lossless'

                    upload(torrent, encoder, bitrate, logfiles)

        if options.verbose: print('All done with ' + flacdir + ' ...')
    return 0

if __name__ == '__main__':
    main()
